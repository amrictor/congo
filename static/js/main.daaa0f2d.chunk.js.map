{"version":3,"sources":["components/Invitations.js","components/Confirm.js","components/MyGames.js","components/Dashboard.js","components/Home.js","components/GameBoard.js","components/Form.js","components/Header.js","commObjects.js","components/Profile.js","components/Game.js","App.js","serviceWorker.js","index.js"],"names":["Invitations","props","submitSearchString","bind","sendGameInvite","updateSearchString","renderSearchInputs","listenForEnter","handleRejectInvitationButtonClick","handleAcceptInvitationButtonClick","getInvitationsReceived","state","searchString","this","getUserInvitationsLists","communicationType","userName","sendObject","id","renderSentToInvitationsTable","renderReceivedFromInvitationsTable","renderInvitePlayer","event","keyCode","Input","type","placeholder","onChange","onKeyDown","Button","onClick","setState","target","value","searchObject","playerName","list","searchResult","forEach","user","push","className","key","href","length","inviteObject","invitationFrom","invitationTo","showInvitePlayer","toNames","invitationLists","sentToNames","Card","CardTitle","Table","size","renderSentToTableRows","rows","namesList","timesList","sentToTimes","i","convertToDate","fromNames","receivedFromNames","renderReceivedFromTableRows","receivedFromTimes","ButtonGroup","timeMilli","Date","parseInt","toString","substring","rejectInvite","acceptInvite","React","Component","Confirm","open","toggleModal","title","button","Modal","isOpen","toggle","ModalHeader","reason","ModalBody","toLowerCase","ModalFooter","MyGames","windowID","abandonGame","matchID","getGames","UncontrolledButtonDropdown","DropdownToggle","caret","statusMyGames","DropdownMenu","DropdownItem","updateStatus","window","abandonObject","playerQuitting","alert","games","gamesResults","map","data","data_array","split","e","playGame","renderTableData","Dashboard","unregisterUser","logOut","isLoggedIn","invitationSentStatus","showInvitationSentStatus","showRefreshInvs","Home","GameBoard","selectionType","pieceLocation","requestMove","match","params","player1","player2","select","changeSelectionType","clearSelection","confirmSelection","selectPiece","selectMove","getGameStatus","communicationVersion","send","moveObject","pieceID","desiredMoves","playerOneName","playerTwoName","j","status","game","encodeLocation","piece","col","row","toUpperCase","isInRiver","pieceLoc","moves","moveLoc","find","move","isPlayer1","isPlayer2","trim","isInCastle","isSelected","player","generateMessage","arr","slice","reverse","pieces","board","flipPieces","generatePieceClasses","buttons","generateClearMoveButton","generateConfirmMoveButton","opponent","generateGameStatusMessage","Form","submit","action","handleFormSubmit","updateTextField","patterns","userEmail","userPassword","Object","keys","sendToServer","filter","field","Label","for","replace","block","Header","logInOut","registerUser","attemptLogin","attemptLogout","Profile","username","Game","updateSearchResult","logIn","next_turn","match_id","searchGames","connection","setCookie","checkCookie","updateSearchGamesResult","setInvitationsLists","WebSocket","onopen","console","log","onerror","error","onmessage","update","JSON","parse","handleUpdate","onclose","updateLogin","updateInvitationSentStatus","statusMessage","errorCode","location","updateBoard","endMatch","searchResults","new_login_state","updatedBoard","whoseTurn","endCondition","exdays","d","setTime","getTime","expires","toUTCString","document","cookie","stringify","cname","name","ca","c","charAt","indexOf","logIn_str","getCookie","obj","self","waitForSocketConnection","callback","setTimeout","readyState","newInvitationLists","exact","path","render","withRouter","App","Boolean","hostname","ReactDOM","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.daaa0f2d.chunk.js","sourcesContent":["import React from 'react';\r\nimport './styles/Invitations.scss'\r\nimport {ButtonGroup, Input, Button, Table, Card, CardTitle} from 'reactstrap';\r\nimport { FaEnvelopeOpenText as Invite, FaCheck as Accept, FaTimes as Reject} from 'react-icons/fa'\r\n\r\nclass Invitations extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.submitSearchString = this.submitSearchString.bind(this);\r\n        this.sendGameInvite = this.sendGameInvite.bind(this);\r\n        this.updateSearchString = this.updateSearchString.bind(this);\r\n        this.renderSearchInputs = this.renderSearchInputs.bind(this);\r\n        this.listenForEnter = this.listenForEnter.bind(this);\r\n        this.handleRejectInvitationButtonClick = this.handleRejectInvitationButtonClick.bind(this);\r\n        this.handleAcceptInvitationButtonClick = this.handleAcceptInvitationButtonClick.bind(this);\r\n        this.getInvitationsReceived = this.getInvitationsReceived.bind(this);\r\n        this.state = {\r\n          searchString: '',\r\n        };\r\n\r\n\r\n    }\r\n    componentDidMount(){\r\n        this.getInvitationsReceived();\r\n    }\r\n\r\n    getInvitationsReceived() {\r\n        let getUserInvitationsLists = {\r\n            communicationType: \"getUserInvsLists\",\r\n            userName: this.props.userName\r\n        };\r\n        this.props.sendObject(getUserInvitationsLists);\r\n    }\r\n\r\n\r\n    render () {\r\n        return (\r\n          <div id=\"invitations\">\r\n            <div id=\"viewsearch\">\r\n                <div id=\"invites\">\r\n                    <div id=\"subtitle\">Current Invitations</div>\r\n                    {this.renderSentToInvitationsTable()}\r\n                    {this.renderReceivedFromInvitationsTable()}\r\n                </div>\r\n                <div id=\"search\">\r\n                    <div id=\"subtitle\">Invite a friend to play!</div>\r\n                    {this.renderSearchInputs()}\r\n                    {this.renderInvitePlayer()}\r\n                </div>\r\n            </div>\r\n          </div>\r\n        );\r\n    }\r\n\r\n\r\n    listenForEnter(event) {\r\n        if (event.keyCode === 13)\r\n            this.submitSearchString(event);\r\n    }\r\n\r\n    renderSearchInputs() {\r\n        return (\r\n          <div>\r\n              <div>\r\n                <div id=\"search_input\">\r\n                    <Input type=\"search\" placeholder=\"Search for a user...\" onChange={this.updateSearchString} onKeyDown={this.listenForEnter}/>\r\n                    <Button onClick={this.submitSearchString}>Search</Button>\r\n                </div>\r\n              </div>\r\n\r\n          </div>\r\n        );\r\n    }\r\n\r\n    updateSearchString(event) {\r\n      this.setState({\r\n        searchString: event.target.value\r\n      });\r\n    }\r\n\r\n    submitSearchString() {\r\n      if (this.state.searchString !== \"\") {\r\n        let searchObject = {\r\n          communicationType: \"searchUser\",\r\n          userName: this.state.searchString,\r\n          playerName: this.props.userName\r\n        };\r\n        this.props.sendObject(searchObject);\r\n      }\r\n    }\r\n\r\n    renderInvitePlayer() {\r\n        let list = []\r\n        this.props.searchResult.forEach(user => {\r\n            list.push(\r\n                <div className=\"result\" key={user}>\r\n                    <a href={\"/user/\"+user}>{user}</a>\r\n                    <div className=\"invite_button\">\r\n                        <Invite className=\"action_button\" onClick={()=>{this.sendGameInvite(user)}}/>\r\n                    </div>\r\n                </div>\r\n            )\r\n        });\r\n        return(\r\n            <div id=\"searchResults\">\r\n                {list.length > 0 ? list : <p>No users found</p>}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    sendGameInvite(userName) {\r\n      let inviteObject = {\r\n        communicationType: \"sendInvitation\",\r\n        invitationFrom: this.props.userName,\r\n        invitationTo: userName\r\n      };\r\n      this.props.sendObject(inviteObject);\r\n      this.getInvitationsReceived()\r\n      this.setState({showInvitePlayer: false});\r\n    }\r\n\r\n  renderSentToInvitationsTable() {\r\n      let toNames = this.props.invitationLists.sentToNames;\r\n      if (toNames.length > 0 && toNames[0] !== \"EMPTY\") {\r\n        return(\r\n          <Card className=\"card_condensed\">\r\n              <CardTitle>Sent Invitations</CardTitle>\r\n            <Table size=\"sm\" className=\"table_condensed\">\r\n              <thead>\r\n              <tr>\r\n                <th>Sent To</th>\r\n                <th>Time Sent</th>\r\n              </tr>\r\n              </thead>\r\n              <tbody>{this.renderSentToTableRows()}</tbody>\r\n            </Table>\r\n          </Card>\r\n        );\r\n      }\r\n      else {\r\n        return (\r\n          <Card className=\"card_condensed\">\r\n              <CardTitle>No sent invitations to show</CardTitle>\r\n          </Card>\r\n        );\r\n      }\r\n  }\r\n\r\n  renderSentToTableRows() {\r\n      let rows = [];\r\n      let namesList = this.props.invitationLists.sentToNames;\r\n      let timesList = this.props.invitationLists.sentToTimes;\r\n      for (let i = 0; i < namesList.length; i++) {\r\n        rows.push(\r\n          <tr key={namesList[i]+\"_\"+i}>\r\n            <td><a href={\"/user/\"+namesList[i]}>{namesList[i]}</a></td>\r\n              <td><i>{this.convertToDate(timesList[i])}</i></td>\r\n          </tr>)\r\n      }\r\n      return rows;\r\n  }\r\n\r\n  renderReceivedFromInvitationsTable() {\r\n    let fromNames = this.props.invitationLists.receivedFromNames;\r\n    if (fromNames.length > 0 && fromNames[0] !== \"EMPTY\") {\r\n      return(\r\n        <Card className=\"card_condensed\">\r\n            <CardTitle>Received Invitations</CardTitle>\r\n            <Table size=\"sm\" className=\"table_condensed\">\r\n              <thead>\r\n              <tr>\r\n                <th>Received From</th>\r\n                <th>Time Received</th>\r\n                  <th></th>\r\n              </tr>\r\n              </thead>\r\n              <tbody>{this.renderReceivedFromTableRows()}</tbody>\r\n            </Table>\r\n        </Card>\r\n      );\r\n    }\r\n    else {\r\n      return (\r\n        <Card className=\"card_condensed\">\r\n            <CardTitle>No received invitations to show</CardTitle>\r\n        </Card>\r\n      );\r\n    }\r\n  }\r\n\r\n  renderReceivedFromTableRows() {\r\n    let rows = [];\r\n    let namesList = this.props.invitationLists.receivedFromNames;\r\n    let timesList = this.props.invitationLists.receivedFromTimes;\r\n    for (let i = 0; i < namesList.length; i++) {\r\n      rows.push(\r\n        <tr>\r\n          <td key={namesList[i]+\"_\"+i}>\r\n              <a href={\"/user/\"+namesList[i]}>{namesList[i]}</a>\r\n          </td>\r\n          <td><i>{this.convertToDate(timesList[i])}</i></td>\r\n          <td>\r\n            <ButtonGroup>\r\n              <Accept className=\"action_button\" onClick={() => this.handleAcceptInvitationButtonClick(namesList[i])}/>\r\n              <Reject className=\"action_button\" onClick={() => this.handleRejectInvitationButtonClick(namesList[i])}/>\r\n            </ButtonGroup>\r\n          </td>\r\n        </tr>)\r\n    }\r\n    return rows;\r\n  }\r\n\r\n  convertToDate(timeMilli) {\r\n      let date = new Date(parseInt(timeMilli,10));\r\n      return date.toString().substring(0,23);\r\n  }\r\n\r\n  handleRejectInvitationButtonClick(invitationFrom) {\r\n    let rejectInvite = {\r\n      communicationType: \"rejectInvite\",\r\n      userName: this.props.userName,\r\n      invitationFrom: invitationFrom\r\n    };\r\n    this.props.sendObject(rejectInvite);\r\n    this.getInvitationsReceived();\r\n  }\r\n\r\n  handleAcceptInvitationButtonClick(invitationFrom) {\r\n      let acceptInvite = {\r\n        communicationType: \"acceptInvite\",\r\n        userName: this.props.userName,\r\n        invitationFrom: invitationFrom\r\n      };\r\n      this.props.sendObject(acceptInvite);\r\n      this.getInvitationsReceived();\r\n  }\r\n\r\n}\r\n\r\nexport default Invitations;\r\n","import React from 'react';\r\nimport {Button, Modal, ModalHeader, ModalBody, ModalFooter} from 'reactstrap';\r\n\r\nclass Confirm extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            open : false\r\n        };\r\n        \r\n        this.toggleModal = this.toggleModal.bind(this)\r\n    }\r\n    \r\n    toggleModal(){\r\n        this.setState({open : !this.state.open})\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={this.props.className} title={this.props.title}>\r\n            <div onClick={this.toggleModal}>{this.props.button}</div>\r\n            <Modal isOpen={this.state.open} toggle={this.toggleModal}>\r\n                <ModalHeader toggle={this.toggleModal}>Confirm {this.props.reason}</ModalHeader>\r\n                <ModalBody>Are you sure you want to {this.props.reason.toLowerCase()}?</ModalBody>\r\n                <ModalFooter>\r\n                <Button onClick={()=>{this.props.onClick(); this.toggleModal();}}>Yes</Button>{' '}\r\n                <Button onClick={this.toggleModal}>No</Button>\r\n                </ModalFooter>\r\n            </Modal>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Confirm\r\n","import React from 'react';\r\nimport './styles/MyGames.scss'\r\nimport {Input, Button, UncontrolledButtonDropdown, DropdownMenu, DropdownItem, DropdownToggle } from 'reactstrap';\r\nimport { FaTrashAlt as Trash, FaPlay as Play} from 'react-icons/fa'\r\nimport Confirm from './Confirm.js'\r\n\r\nclass MyGames extends React.Component {\r\n\r\n    windowID = 1;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.renderSearchInputs = this.renderSearchInputs.bind(this);\r\n        this.listenForEnter = this.listenForEnter.bind(this);\r\n        this.abandonGame = this.abandonGame.bind(this);\r\n\r\n        this.state = {\r\n            matchID: 1\r\n        };\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.props.getGames();\r\n    }\r\n\r\n    listenForEnter(event) {\r\n        if (event.keyCode === 13)\r\n            this.props.getGames();\r\n    }\r\n\r\n    renderSearchInputs() {\r\n        return (\r\n            <div id=\"search_input\">\r\n                <Input type=\"search\" placeholder=\"Filter on opponent...\" onChange={this.props.updateSearchString} onKeyDown={this.listenForEnter}/>\r\n                <UncontrolledButtonDropdown>\r\n                    <DropdownToggle caret> {this.props.statusMyGames === '' ? \"Games Status\" : this.props.statusMyGames} </DropdownToggle>\r\n                    <DropdownMenu>\r\n                        <DropdownItem value=\"In Progress\" onClick={this.props.updateStatus}>In Progress</DropdownItem>\r\n                        <DropdownItem value=\"Finished\" onClick={this.props.updateStatus}>Finished</DropdownItem>\r\n                        <DropdownItem value=\"Abandoned\" onClick={this.props.updateStatus}>Abandoned</DropdownItem>\r\n                        <DropdownItem value=\"All\" onClick={this.props.updateStatus}>All</DropdownItem>\r\n                    </DropdownMenu>\r\n                </UncontrolledButtonDropdown>\r\n                <Button onClick={this.props.getGames}>Search</Button>\r\n            </div>\r\n        );\r\n    }\r\n\r\n\r\n    playGame(id){\r\n\r\n        window.open(`/game/${id}`, `popUpWindow${this.windowID}`, \"resizable=yes,top=200,left=600,width=700,height=700\");\r\n        this.windowID++;\r\n    }\r\n    \r\n    abandonGame(matchID){\r\n        let abandonObject = {\r\n            communicationType: \"quitMatch\",\r\n            matchID: matchID,\r\n            playerQuitting: this.props.userName\r\n        }\r\n        this.props.sendObject(abandonObject)\r\n        alert(\"Game sucessfully abandoned\")\r\n        this.props.getGames();\r\n    }\r\n\r\n\r\n    renderTableData(games){\r\n        if(this.props.gamesResults.length===0) return (<p>No matches found</p>);\r\n        return this.props.gamesResults.map((data) => {\r\n        let data_array = data.split(',');\r\n        return (\r\n            <div className=\"result\" key={data_array[0]}>\r\n                <p><b><a href={\"/user/\"+data_array[1]}>{data_array[1]}</a></b></p>\r\n                <p><i>{data_array[2]}</i></p>\r\n                <p>Last updated {data_array[3]}</p>\r\n                <div className=\"game_buttons\">\r\n                    <Confirm title=\"Abandon\" className=\"game_buttons\" onClick={e => this.abandonGame(data_array[0])} button=<Trash className=\"game_buttons\"/> reason=\"Abandon Game\"/>\r\n                    <Play title=\"Play\" className=\"game_buttons\" onClick={e => this.playGame(data_array[0])}/>\r\n                </div>\r\n            </div>);\r\n        })\r\n    }\r\n\r\n    render () {\r\n        return (\r\n            <div id=\"mygames\">\r\n                <div id=\"wrapper\">\r\n                    <div id=\"games\">\r\n                        <div id=\"subtitle\">My Games</div>\r\n                        {this.renderSearchInputs()}\r\n                        <div id=\"game_data\">\r\n                            {this.renderTableData(this.props.gamesResults)}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default MyGames;\r\n","import React from 'react';\r\nimport Invitations from \"./Invitations\";\r\nimport \"./styles/Dashboard.scss\"\r\nimport MyGames from \"./MyGames\";\r\nimport Confirm from \"./Confirm\";\r\nimport Home from \"./Game\";\r\n\r\nclass Dashboard extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            \"communicationType\": \"unregisterUser\",\r\n            \"userName\": this.props.userName\r\n        }\r\n        this.unregisterUser = this.unregisterUser.bind(this);\r\n    }\r\n\r\n    unregisterUser() {\r\n        this.props.sendObject(this.state);\r\n        this.props.logOut();\r\n    }\r\n\r\n    render () {\r\n        return (\r\n            <div id=\"dash\">\r\n                <div className=\"header\">\r\n                    <p >Hi <b>{this.props.userName}</b>! Access your games and options here.</p>\r\n                    <Confirm className=\"delete\" onClick={this.unregisterUser} reason=\"Delete Account\" button=<a className=\"delete\">Delete Account</a>/>\r\n                </div>\r\n                <div id=\"features\">\r\n                    <MyGames isLoggedIn={this.props.isLoggedIn}\r\n                             userName={this.props.userName}\r\n                             gamesResults={this.props.gamesResults}\r\n                             sendObject={this.props.sendObject}\r\n                             searchString={this.props.searchString}\r\n                             statusMyGames={this.props.statusMyGames}\r\n                             getGames={this.props.getGames}\r\n                             updateStatus={this.props.updateStatus}\r\n                             updateSearchString={this.props.updateSearchString}\r\n                    />\r\n                    <Invitations isLoggedIn={this.props.isLoggedIn}\r\n                                 userName={this.props.userName}\r\n                                 sendObject={this.props.sendObject}\r\n                                 searchResult={this.props.searchResult}\r\n                                 showInvitePlayer={this.props.showInvitePlayer}\r\n                                 invitationSentStatus={this.props.invitationSentStatus}\r\n                                 showInvitationSentStatus={this.props.showInvitationSentStatus}\r\n                                 invitationLists={this.props.invitationLists}\r\n                                 getInvitationsReceived={this.getInvitationsReceived}\r\n                                 showRefreshInvs={this.props.showRefreshInvs}\r\n                    />\r\n                </div>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Dashboard;\r\n","import React from 'react';\r\nimport Dashboard from \"./Dashboard\";\r\n\r\nclass Home extends React.Component {\r\n\r\n    render () {\r\n        return (\r\n            <div id=\"home\">\r\n                {this.props.isLoggedIn()\r\n                    ? <Dashboard\r\n                        userName={this.props.userName}\r\n                        logOut={this.props.logOut}\r\n                        isLoggedIn={this.props.isLoggedIn}\r\n                        gamesResults={this.props.gamesResults}\r\n                        sendObject={this.props.sendObject}\r\n                        searchResult={this.props.searchResult}\r\n                        showInvitePlayer={this.props.showInvitePlayer}\r\n                        invitationSentStatus={this.props.invitationSentStatus}\r\n                        showInvitationSentStatus={this.props.showInvitationSentStatus}\r\n                        invitationLists={this.props.invitationLists}\r\n                        getInvitationsReceived={this.props.getInvitationsReceived}\r\n                        showRefreshInvs={this.props.showRefreshInvs}\r\n                        searchString={this.props.searchString}\r\n                        statusMyGames={this.props.statusMyGames}\r\n                        getGames={this.props.getGames}\r\n                        updateStatus={this.props.updateStatus}\r\n                        updateSearchString={this.props.updateSearchString}\r\n                    />\r\n                    : \"Welcome to CongoOnline! Register an account and invite your friends to play Congo!\"\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Home;\r\n","import React, { Component } from 'react';\r\nimport { Button } from 'reactstrap';\r\n\r\nimport './styles/GameBoard.scss';\r\n\r\nclass GameBoard extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            selectionType: \"pieceID\",\r\n            pieceLocation: -1,\r\n            requestMove: {\r\n                \"communicationType\": \"requestMoves\",\r\n                \"communicationVersion\": 1,\r\n                \"matchID\": this.props.match.params.matchID,\r\n                \"playerName\": this.props.playerName,\r\n                \"pieceID\" : \"\",\r\n                \"desiredMoves\": [],\r\n                \"playerOneName\": this.props.player1,\r\n                \"playerTwoName\": this.props.player2\r\n              }\r\n        }\r\n        this.select = this.select.bind(this);\r\n        this.changeSelectionType = this.changeSelectionType.bind(this);\r\n        this.clearSelection = this.clearSelection.bind(this);\r\n        this.confirmSelection = this.confirmSelection.bind(this);\r\n        this.selectPiece = this.selectPiece.bind(this);\r\n        this.selectMove = this.selectMove.bind(this);\r\n        this.getGameStatus = this.getGameStatus.bind(this);\r\n    }\r\n\r\n    getGameStatus(){\r\n        let searchObject = {\r\n            communicationType: \"requestGameLoad\",\r\n            userName: this.props.userName,\r\n            communicationVersion: this.state.requestMove.communicationVersion,\r\n            matchID: this.props.match.params.matchID\r\n        };\r\n        this.props.send(searchObject);\r\n\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.getGameStatus();\r\n    }\r\n\r\n    //send move to server for validation and completion\r\n    confirmSelection() {\r\n        let moveObject = {\r\n            communicationType: this.state.requestMove.communicationType,\r\n            communicationVersion: this.state.requestMove.communicationVersion,\r\n            matchID: this.props.match.params.matchID,\r\n            pieceID: this.state.requestMove.pieceID,\r\n            desiredMoves: this.state.requestMove.desiredMoves,\r\n            userName: this.props.userName,\r\n            playerName: this.props.playerName,\r\n            playerOneName: this.props.player1,\r\n            playerTwoName: this.props.player2\r\n        };\r\n        this.props.send(moveObject);\r\n        this.clearSelection();\r\n    }\r\n\r\n    //clear currently selected piece and move\r\n    clearSelection() {\r\n        let state = this.state;\r\n        state.requestMove.pieceID = \"\";\r\n        state.requestMove.desiredMoves = [];\r\n        state.selectionType = \"pieceID\"\r\n        state.pieceLocation = -1;\r\n        this.setState(state);\r\n    }\r\n\r\n    //update selection mode (between piece selection and move selection)\r\n    changeSelectionType(type) {\r\n        this.setState({selectionType: type})\r\n    }\r\n\r\n    //select a piece or move\r\n    select(i,j){\r\n        //only allow any item to be selected if game is active - i.e. not in \"win\" or \"quit\" state\r\n        if (this.props.status !== \"active\" || this.props.userName !== this.props.playerName) return;\r\n\r\n        //prevent selection of current space\r\n        if(this.state.pieceLocation===(i * 10 + j)) return;\r\n        \r\n        //make selection\r\n        if(this.state.selectionType==='pieceID') this.selectPiece(i,j);\r\n        else this.selectMove(i,j);\r\n\r\n        //after selecting a piece, change modes to select the piece's move\r\n        if(this.state.selectionType===\"pieceID\" && this.props.game[i][j].length>0) this.changeSelectionType(\"desiredMoves\");\r\n    }\r\n    selectPiece(i, j) {\r\n        let state = this.state;\r\n\r\n        let encodeLocation = i * 10 + j;\r\n        //get alphanumeric representation of piece\r\n        state.requestMove.pieceID = this.props.game[i][j];\r\n        state.pieceLocation = encodeLocation;\r\n        state.requestMove.desiredMoves.push(encodeLocation);\r\n        this.setState(state);\r\n    }\r\n    selectMove(i, j) {\r\n        //prevent pieces other than monkey from taking multiple moves\r\n        let piece = this.state.pieceLocation;\r\n        let col = piece % 10;\r\n        let row = (piece - col)/10;\r\n\r\n        if(this.props.game[row][col].toUpperCase()!=='M' && this.state.requestMove['desiredMoves'].length>=2) return;\r\n\r\n        let state = this.state;\r\n        let encodeLocation = i * 10 + j;\r\n        state.requestMove[state.selectionType].push(encodeLocation);\r\n        this.setState(state);\r\n    }\r\n\r\n    //basic logical determinations for pieces\r\n    isInRiver(i, j) {\r\n        return (i===3) ? \"river\" : \"\";\r\n    }\r\n    isInCastle(i, j) {\r\n        return (2<=j && j<=4 && !this.isInRiver(i,j)) ? \"castle\" : \"\"\r\n    }\r\n    isSelected(i, j) {\r\n        let pieceLoc = this.state.pieceLocation;\r\n        let moves = this.state.requestMove.desiredMoves;\r\n        //let numMoves = moves.length;\r\n        let moveLoc = i * 10 + j;\r\n        return `${(pieceLoc===moveLoc) ? \"selected\" : \"\"}${(moves.find((move)=>move===moveLoc) && (pieceLoc!==moveLoc)) ? \"move\" : \"\"}`\r\n    }\r\n    player(i, j) {\r\n\r\n        let isPlayer1 = this.props.userName === this.props.player1\r\n        let isPlayer2 = this.props.userName === this.props.player2\r\n\r\n        if(this.props.game[i][j].trim()===\"\") return \"\"\r\n        if(this.props.game[i][j] === this.props.game[i][j].toLowerCase() && isPlayer1) return \"player\"\r\n        else if(this.props.game[i][j] === this.props.game[i][j].toUpperCase() && isPlayer2) return \"player\"\r\n    }\r\n\r\n    //generate classes for styling\r\n    generatePieceClasses(i, j){\r\n        return `piece ${this.state.selectionType} ${this.isInRiver(i,j)}${this.isInCastle(i,j)} ${this.isSelected(i,j)} ${this.player(i, j)}`\r\n    }\r\n\r\n    generateMessage(){\r\n        switch(this.props.status) {\r\n            case \"won\": return \" won!  Game over!\";\r\n            case \"quit\": return \" quit.  Game halted!\";\r\n            case \"active\": return \"'s move\";\r\n            default : return \"'s move\";\r\n        }\r\n    }\r\n\r\n    //generate icon & message to indicate which player's move is expected next\r\n    generateGameStatusMessage(player){\r\n        return (this.props.playerName === player) &&\r\n        <div className=\"player1\">\r\n            <p>&#127810;<b>{player}</b>{this.generateMessage()}&#x1f334;</p>\r\n        </div>\r\n    }\r\n\r\n    generateClearMoveButton(){\r\n        if (this.props.status === \"active\" && this.props.userName === this.props.playerName){\r\n            return <Button onClick={this.clearSelection}>Clear Move</Button>\r\n        }\r\n    }\r\n\r\n    generateConfirmMoveButton(){\r\n        if (this.props.status === \"active\" && this.props.userName === this.props.playerName){\r\n            return <Button onClick={this.confirmSelection}>Confirm Move</Button>\r\n        }\r\n    }\r\n\r\n    flipPieces(arr) {\r\n        if  (this.props.userName === this.props.player2) return arr;\r\n        else return arr.slice().reverse();\r\n    }\r\n\r\n\r\n    render(){\r\n        if(this.props.game.length===0)\r\n            return \"Loading...\"\r\n        //map piece ids to unicode icons\r\n        const pieces = {\r\n            'P': <>&#127809;</>,\r\n            'L': <>&#x1f981;</>,\r\n            'G': <>&#x1f992;</>,\r\n            'M': <>&#128018;</>,\r\n            'E': <>&#x1F418;</>,\r\n            'C': <>&#x1f40a;</>,\r\n            'Z': <>&#129427;</>,\r\n            'p': <>&#127810;</>,\r\n            'l': <>&#x1f981;</>,\r\n            'g': <>&#x1f992;</>,\r\n            'm': <>&#x1F435;</>,\r\n            'e': <>&#x1F418;</>,\r\n            'c': <>&#x1f40a;</>,\r\n            'z': <>&#129427;</>,\r\n\r\n            /*Added for superPawn*/\r\n            's': <>&#x1f334;</>,\r\n            'S': <>&#x1f333;</>\r\n        }\r\n\r\n        //generate board from game state array\r\n        let board =\r\n            <div>\r\n\r\n                <div className=\"board\">\r\n                {this.flipPieces(this.props.game.map((row, i)=>\r\n                        <div key={i} className=\"board_row\">\r\n                            {this.flipPieces(row.map((piece, j)=>\r\n                                    <div key={i+\"_\"+j}\r\n                                         className={this.generatePieceClasses(i,j)}\r\n                                         onClick={()=>this.select(i, j)}>\r\n                                            <span>{pieces[piece]}</span>\r\n                                    </div>))}\r\n                        </div>\r\n                ))}\r\n                </div>\r\n\r\n            </div>\r\n        \r\n        //action buttons\r\n        let buttons =\r\n            <div className=\"buttons\">\r\n                {this.generateClearMoveButton()}\r\n                {this.generateConfirmMoveButton()}\r\n            </div>\r\n\r\n        let opponent = (this.props.player1 !== this.props.userName) ? this.props.player1 : this.props.player2\r\n\r\n        return (\r\n            <div id=\"gameboard\">\r\n\r\n                {this.generateGameStatusMessage(opponent)}\r\n                {board}\r\n                {this.generateGameStatusMessage(this.props.userName)}\r\n                {buttons}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default GameBoard;\r\n\r\n","import React from 'react';\r\nimport { Button, Label, Input } from 'reactstrap';\r\nimport './styles/Form.scss';\r\n//Used for Log in and Registration\r\nclass Form extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            submit: this.props.action\r\n        }\r\n        this.handleFormSubmit = this.handleFormSubmit.bind(this);\r\n        this.updateTextField = this.updateTextField.bind(this);\r\n        this.listenForEnter = this.listenForEnter.bind(this);\r\n    }\r\n    handleFormSubmit(){\r\n        let patterns = {\r\n            userName: /[A-Za-z0-9]+/,\r\n            userEmail: /[A-Za-z0-9_\\-.]+@[A-Za-z0-9_\\-.]+\\.[A-Za-z0-9_\\-.]+/,\r\n            userPassword: /[A-Za-z0-9]+/\r\n        }\r\n        for (var i = 0; i < Object.keys(this.state.submit).length; i++) {\r\n            var key = Object.keys(this.state.submit)[i]\r\n            if (typeof this.state.submit[key] == \"string\" && !this.state.submit[key].match(patterns[key])) {\r\n                alert(\"Please ensure that you have entered a valid email.\")\r\n                return;\r\n            }\r\n        }\r\n        this.props.sendToServer(this.state.submit);\r\n    }\r\n    updateTextField(key, value) {\r\n        let state = this.state;\r\n        state.submit[key] = value;\r\n        this.setState(state);\r\n    }\r\n\r\n    listenForEnter(event) {\r\n        if (event.keyCode === 13)\r\n            this.handleFormSubmit(event);\r\n    }\r\n\r\n    render () {\r\n        return (\r\n            <div id=\"form\">\r\n                {this.props.isLoggedIn() ? \"You're already logged in!\" :\r\n                <>\r\n                    <div className=\"page_title\">{this.props.title}</div>\r\n                    {Object.keys(this.state.submit).filter((key) => key.match(/user/i)).map((field)=>{\r\n                        let type = field.match(/email/, \"gi\") ? \"email\" : field.match(/password/i) ? \"password\" : \"text\";\r\n                        return (\r\n                            <div className=\"form_input\">\r\n                                <Label for={field}>{field.replace(\"user\", \"\")}: </Label>\r\n                                <Input type={type} key={field} onChange={(event)=>{this.updateTextField(field, event.target.value)}} onKeyDown={this.listenForEnter}/>\r\n                            </div>\r\n                        );}\r\n                    )}\r\n                    <Button block size=\"sm\" onClick={this.handleFormSubmit}>Submit</Button>\r\n                </>}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Form;\r\n","import React from 'react';\r\nimport { GiLion as CongoIcon } from 'react-icons/gi'\r\n\r\nclass Header extends React.Component {\r\n\r\n    render () {\r\n        let logInOut =\r\n                this.props.isLoggedIn()\r\n                    ? <a className=\"nav-link right\" href=\"/\" onClick={this.props.logOut}>Log Out (<u>{this.props.userName}</u>)</a>\r\n                :   <>\r\n                        <a className=\"nav-link right\" href=\"/register\">Register</a>\r\n                        <a className=\"nav-link right\" href=\"/login\">Log In</a>\r\n                    </>\r\n\r\n        return (\r\n            <div id=\"header\">\r\n            <div id=\"title\">\r\n                CongoOnline\r\n                <CongoIcon id=\"icon\"/>\r\n            </div>\r\n            <div id=\"menu\">\r\n                <a className=\"nav-link\" href=\"/\">Home</a>\r\n                {logInOut}\r\n            </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n\r\n\r\n}\r\nexport default Header;\r\n\r\n","let registerUser = {\r\n    \"communicationType\": \"registerUser\",\r\n    \"communicationVersion\": 1,\r\n    \"userName\": \"\",\r\n    \"userEmail\": \"\",\r\n    \"userPassword\": \"\"\r\n}\r\nlet attemptLogin = {\r\n    \"communicationType\": \"attemptLogin\",\r\n    \"communicationVersion\": 1,\r\n    \"userEmail\": \"\",\r\n    \"userPassword\": \"\"\r\n}\r\nlet attemptLogout = {\r\n    \"communicationType\": \"attemptLogout\",\r\n    \"communicationVersion\": 1,\r\n    \"userEmail\": \"\"\r\n}\r\n\r\nexport {\r\n         registerUser,\r\n         attemptLogin,\r\n         attemptLogout\r\n       };","import React from 'react';\r\nimport './styles/MyGames.scss'\r\nimport {Input, Button, UncontrolledButtonDropdown, DropdownMenu, DropdownItem, DropdownToggle } from 'reactstrap';\r\nimport { FaEnvelopeOpenText as Invite} from 'react-icons/fa'\r\n\r\nclass Profile extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.getGames = this.getGames.bind(this);\r\n        this.updateSearchString = this.updateSearchString.bind(this);\r\n        this.renderSearchInputs = this.renderSearchInputs.bind(this);\r\n        this.listenForEnter = this.listenForEnter.bind(this);\r\n        this.updateStatus = this.updateStatus.bind(this);\r\n        this.state = {\r\n            searchString: '',\r\n            status: 'In Progress',\r\n            matchID: 1\r\n        };\r\n    }\r\n\r\n    getGames(){\r\n        let searchObject = {\r\n            communicationType: \"searchGames\",\r\n            userName: this.props.match.params.username,\r\n            playerTwoName: this.state.searchString,\r\n            status: this.state.status,\r\n        };\r\n        this.props.sendObject(searchObject);\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.getGames();\r\n    }\r\n\r\n    listenForEnter(event) {\r\n        if (event.keyCode === 13)\r\n            this.getGames();\r\n    }\r\n\r\n    updateStatus(event) {\r\n        this.setState({status: event.target.value}, () => this.getGames())\r\n    }\r\n    renderSearchInputs() {\r\n        return (\r\n            <div id=\"search_input\">\r\n                <Input type=\"search\" placeholder=\"Filter on opponent...\" onChange={this.updateSearchString} onKeyDown={this.listenForEnter}/>\r\n                <UncontrolledButtonDropdown>\r\n                    <DropdownToggle caret> {this.state.status === '' ? \"Games Status\" : this.state.status} </DropdownToggle>\r\n                    <DropdownMenu>\r\n                        <DropdownItem value=\"In Progress\" onClick={this.updateStatus}>In Progress</DropdownItem>\r\n                        <DropdownItem value=\"Finished\" onClick={this.updateStatus}>Finished</DropdownItem>\r\n                        <DropdownItem value=\"Abandoned\" onClick={this.updateStatus}>Abandoned</DropdownItem>\r\n                        <DropdownItem value=\"All\" onClick={this.updateStatus}>All</DropdownItem>\r\n                    </DropdownMenu>\r\n                </UncontrolledButtonDropdown>\r\n                <Button onClick={this.getGames}>Search</Button>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    updateSearchString(event) {\r\n      this.setState({\r\n        searchString: event.target.value\r\n      });\r\n    }\r\n\r\n    sendGameInvite(userName) {\r\n        let inviteObject = {\r\n            communicationType: \"sendInvitation\",\r\n            invitationFrom: this.props.userName,\r\n            invitationTo: userName\r\n        };\r\n        this.props.sendObject(inviteObject);\r\n        this.setState({showInvitePlayer: false});\r\n    }\r\n\r\n    renderTableData(games){\r\n        if(this.props.gamesResults.length===0) return (<p>No matches found</p>);\r\n        return this.props.gamesResults.map((data) => {\r\n        let data_array = data.split(',');\r\n        return (\r\n            <div className=\"result\" key={data_array[0]}>\r\n                <p><b><a href={\"/user/\"+data_array[1]}>{data_array[1]}</a></b></p>\r\n                <p><i>{data_array[2]}</i></p>\r\n                <p>Last updated {data_array[3]}</p>\r\n            </div>);\r\n        })\r\n    }\r\n\r\n    render () {\r\n        return (\r\n            <div id=\"profiles\">\r\n                <div id=\"wrapper\">\r\n                    <div id=\"games\">\r\n                        <div id=\"subtitle\"><b>{this.props.match.params.username}</b>'s Game History\r\n                            <Invite className=\"invite_button\" title=\"Invite to play!\" onClick={()=>{this.sendGameInvite(this.props.match.params.username)}}/>\r\n                       </div>\r\n                        {this.renderSearchInputs()}\r\n                        <div id=\"game_data\">\r\n                            {this.renderTableData(this.props.gamesResults)}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default Profile;\r\n","import React, { Component } from 'react';\r\nimport { Switch, Route, withRouter } from \"react-router-dom\";\r\nimport Home from './Home.js'\r\nimport GameBoard from './GameBoard.js'\r\nimport Form from './Form.js'\r\nimport Header from './Header'\r\nimport {attemptLogin, attemptLogout, registerUser} from '../commObjects'\r\nimport './styles/Game.scss'\r\nimport Profile from \"./Profile\";\r\nimport MyGames from \"./MyGames.js\"\r\n\r\nclass Game extends Component {\r\n    constructor(props){\r\n        super(props);\r\n      \r\n        this.updateSearchResult = this.updateSearchResult.bind(this);\r\n      \r\n        this.state = {\r\n          logIn: {},\r\n          player1: [\"player1\"],\r\n          player2: [\"player2\"],\r\n          next_turn: [\"player1\"],\r\n          match_id: [\"1\"],\r\n          games: [[]],\r\n          status: \"active\",\r\n          searchResult: [],\r\n          searchGames: [],\r\n          invitationLists: {\r\n            sentToNames: [],\r\n            sentToTimes: [],\r\n            receivedFromNames: [],\r\n            receivedFromTimes: []\r\n          },\r\n          searchString: '',\r\n          statusMyGames: 'In Progress'\r\n        };\r\n\r\n        this.connection = null;\r\n        this.sendObject = this.sendObject.bind(this);\r\n        this.logOut = this.logOut.bind(this);\r\n        this.isLoggedIn = this.isLoggedIn.bind(this);\r\n        this.updateSearchResult = this.updateSearchResult.bind(this);\r\n        this.setCookie = this.setCookie.bind(this);\r\n        this.checkCookie = this.checkCookie.bind(this);\r\n        this.updateSearchGamesResult = this.updateSearchGamesResult.bind(this);\r\n        this.setInvitationsLists = this.setInvitationsLists.bind(this);\r\n        this.getGames = this.getGames.bind(this);\r\n        this.updateStatus = this.updateStatus.bind(this);\r\n        this.updateSearchString = this.updateSearchString.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.checkCookie();\r\n        this.connection = new WebSocket('ws://localhost:4444');\r\n        this.connection.onopen = function () {\r\n          console.log('Connected!');\r\n        }\r\n\r\n        this.connection.onerror = function (error) {\r\n          console.log('WebSocket Error: ' + error);\r\n          alert(\"Cannot reach server!\")\r\n        }\r\n    \r\n        this.connection.onmessage = function (e) {\r\n          let update = JSON.parse(e.data);\r\n          this.handleUpdate(update)\r\n        }.bind(this);\r\n    \r\n        this.connection.onclose = function (e) {\r\n          console.log('Connection lost');\r\n          //THIS FUNCTION IS CALLED ON REFRESH IN FIREFOX BUT NOT CHROME\r\n        };\r\n    }\r\n\r\n    handleUpdate(update) {\r\n        switch(update.communicationType) {\r\n            case \"registrationSuccess\": this.updateLogin(update); break;\r\n            case \"invitationSentStatus\": this.updateInvitationSentStatus(update); break;\r\n            case \"error\" : alert(update.statusMessage); if(update.errorCode===105) window.location.href = \"/\"; break;\r\n            case \"updateBoard\": this.updateBoard(update); break;\r\n            case \"loginSuccess\": case \"logoutSuccess\": this.updateLogin(update); break;\r\n            case \"searchResult\": this.updateSearchResult(update); break;\r\n            case \"endMatch\" : this.endMatch(update); break;\r\n            case \"searchGamesResult\": this.updateSearchGamesResult(update); break;\r\n            case \"sendUserInvsLists\" : this.setInvitationsLists(update);break;\r\n            case \"inviteAcceptStatus\": this.getGames(); break;\r\n            default: break;\r\n        }\r\n    }\r\n\r\n    updateSearchGamesResult(update) {\r\n        this.setState({searchGames: update.searchResults});\r\n    }\r\n\r\n    updateLogin(update) {\r\n        let new_login_state = update.communicationType === \"logoutSuccess\" ? {} : update;\r\n        this.setState({logIn: new_login_state});\r\n        this.setCookie(new_login_state);\r\n        window.location.href = \"/\";\r\n    }\r\n\r\n    updateBoard(update){\r\n        let state = this.state;\r\n        state.games = [update.updatedBoard];\r\n        state.next_turn = [update.whoseTurn];\r\n        state.match_id = [update.matchID];\r\n        state.player1 = [update.playerOneName];\r\n        state.player2 = [update.playerTwoName];\r\n        state.status = update.endCondition;\r\n        this.setState(state);\r\n    }\r\n\r\n    endMatch(update){\r\n        let state = this.state;\r\n        state.games = [update.updatedBoard];\r\n        state.status = update.endCondition;\r\n        this.setState(state);\r\n    }\r\n\r\n    setCookie(logIn, exdays=0) {\r\n        var d = new Date();\r\n        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));\r\n        var expires = (exdays===0) ? \"\" : \"expires=\"+d.toUTCString() + \";path=/\";\r\n        document.cookie = \"logIn=\" + JSON.stringify(logIn) + \";\" + expires;\r\n    }\r\n\r\n    getCookie(cname) {\r\n        let name = cname + \"=\";\r\n        let ca = document.cookie.split(';');\r\n        for(let i = 0; i < ca.length; i++) {\r\n            let c = ca[i];\r\n            while (c.charAt(0) === ' ') {\r\n                c = c.substring(1);\r\n            }\r\n            if (c.indexOf(name) === 0) {\r\n                return c.substring(name.length, c.length);\r\n            }\r\n        }\r\n        return \"\";\r\n    }\r\n\r\n    checkCookie() {\r\n        let logIn_str = this.getCookie(\"logIn\");\r\n        if (logIn_str !== \"\") {\r\n            let logIn = JSON.parse(logIn_str);\r\n            this.setState({logIn: logIn});\r\n        }\r\n    }\r\n\r\n    sendObject(obj){\r\n        let self = this;\r\n        function waitForSocketConnection(callback){\r\n            setTimeout(\r\n                function () {\r\n                    if (self.connection.readyState === 1) {\r\n                        if (callback != null){\r\n                            if(!obj.userName) obj.userName = self.state.logIn.userName;\r\n                            callback();\r\n                        }\r\n                    } else {\r\n\r\n                        waitForSocketConnection(callback);\r\n                    }\r\n\r\n                }, 5); // wait 5 milisecond for the connection...\r\n        }\r\n        waitForSocketConnection(() => self.connection.send(JSON.stringify(obj)));\r\n    }\r\n\r\n    logOut() { this.sendObject(attemptLogout); }\r\n\r\n    isLoggedIn(){ return JSON.stringify(this.state.logIn)!==\"{}\"; }\r\n\r\n    updateSearchResult(update) {\r\n      this.setState({searchResult: update.searchResults});\r\n    }\r\n\r\n    updateInvitationSentStatus(update) {\r\n      this.setState({invitationSentStatus: update});\r\n      this.setState({showInvitationSentStatus: true});\r\n      this.setState({showInvitePlayer: true});\r\n    }\r\n\r\n    setInvitationsLists(update) {\r\n      let newInvitationLists = {\r\n        sentToNames: update.sentToNames,\r\n        sentToTimes: update.sentToTimes,\r\n        receivedFromNames: update.receivedFromNames,\r\n        receivedFromTimes: update.receivedFromTimes\r\n      };\r\n      this.setState({invitationLists: newInvitationLists});\r\n    }\r\n\r\n   getGames(){\r\n     let searchObject = {\r\n       communicationType: \"searchGames\",\r\n       userName: this.state.logIn.userName,\r\n       playerTwoName: this.state.searchString,\r\n       status: this.state.statusMyGames,\r\n     };\r\n     this.sendObject(searchObject);\r\n  }\r\n\r\n  updateStatus(event) {\r\n    this.setState({statusMyGames: event.target.value}, () => this.getGames())\r\n    console.log(\"statusMyGames: \" + this.state.statusMyGames);\r\n  }\r\n\r\n  updateSearchString(event) {\r\n    this.setState({\r\n      searchString: event.target.value\r\n    });\r\n  }\r\n\r\n  render(){\r\n\r\n        return(\r\n            <div id=\"Application\">\r\n                <Header sendObject={this.sendObject} userName={this.state.logIn.userName} isLoggedIn={this.isLoggedIn} logOut={this.logOut}/>\r\n                <div id=\"page_container\">\r\n                    <Switch location={window.location}>\r\n                        <Route\r\n                            exact\r\n                            path=\"/\"\r\n                            render={(props) => <Home\r\n                                                    isLoggedIn={this.isLoggedIn}\r\n                                                    userName={this.state.logIn.userName}\r\n                                                    logOut={this.logOut}\r\n                                                    sendObject={this.sendObject}\r\n                                                    searchResult={this.state.searchResult}\r\n                                                    showInvitePlayer={this.state.showInvitePlayer}\r\n                                                    invitationSentStatus={this.state.invitationSentStatus}\r\n                                                    showInvitationSentStatus={this.state.showInvitationSentStatus}\r\n                                                    invitationLists={this.state.invitationLists}\r\n                                                    gamesResults={this.state.searchGames}\r\n                                                    showRefreshInvs={this.state.showRefreshInvs}\r\n                                                    searchString={this.state.searchString}\r\n                                                    statusMyGames={this.state.statusMyGames}\r\n                                                    getGames={this.getGames}\r\n                                                    updateStatus={this.updateStatus}\r\n                                                    updateSearchString={this.updateSearchString}\r\n                                                />}\r\n                        />\r\n                        <Route\r\n                            path=\"/register\"\r\n                            render={(props) => <Form {...props} title=\"Register an account\" action={registerUser} isLoggedIn={this.isLoggedIn} sendToServer={this.sendObject}/>}\r\n                        />\r\n                        <Route\r\n                            path=\"/login\"\r\n                            render={(props) => <Form {...props} title=\"Log in\" action={attemptLogin} isLoggedIn={this.isLoggedIn} sendToServer={this.sendObject}/>}\r\n                        />\r\n                        <Route\r\n                            path=\"/game/:matchID\"\r\n                            render={(props) => <GameBoard {...props} game={this.state.games[0]} playerName = {this.state.next_turn[0]}\r\n                                                            player1={this.state.player1[0]} player2={this.state.player2[0]}\r\n                                                            match_id={this.state.match_id[0]} status={this.state.status}\r\n                                                            userName={this.state.logIn.userName} send={this.sendObject}/>}\r\n                        />\r\n                        <Route\r\n                            path=\"/user/:username\"\r\n                            render={(props) => <Profile {...props} game={this.state.games[0]} playerName = {this.state.next_turn[0]}\r\n                                                          player1={this.state.player1[0]} player2={this.state.player2[0]}\r\n                                                          match_id={this.state.match_id[0]} status={this.state.status}\r\n                                                          userName={this.state.logIn.userName} sendObject={this.sendObject}\r\n                                                        gamesResults={this.state.searchGames}/>}\r\n                        />\r\n                    </Switch>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withRouter(Game);\r\n\r\n","import React from 'react';\r\nimport Game from './components/Game';\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Game/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { BrowserRouter as Router } from \"react-router-dom\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nReactDOM.render(\r\n    <Router>\r\n        <App />\r\n    </Router>, document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}